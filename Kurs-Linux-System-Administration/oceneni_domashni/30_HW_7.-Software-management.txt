8. Describe what you have to do in order to start using autoconf for your project.

Autoconf is used to generate the configure script, from a template named configure.ac. The configure script will check all characteristics of the host system and generate the makefiles from Makefile.in templates.

    Create an empty directory called tut_prog and enter in it.
    In this new directory, create a new file named main.c containing:

Example main.c:

#include <stdio.h> 
	
int main()
{
	printf("Hello world!\n");
	return 0;
}


    Write the following in a file named configure.ac: 

Example minimal configure.ac:

AC_INIT([Tutorial Program], 1.0)
AM_INIT_AUTOMAKE
AC_PROG_CC
AC_CONFIG_FILES(Makefile)
AC_OUTPUT

The configure template script could be named configure.in. It is the name used in older version (before 2001) of Autoconf. Nevertheless, it is recommended to use configure.ac because the .in extension is already used by files processed by configure and generated by Automake: Makefile.in and autoheader: config.h.in.

AC_INIT, AM_INIT_AUTOMAKE, etc... are M4 macros. M4 is a macro expanding software used by Autotools; we don't need to know about it. When Autoconf will process this configure.in, the macros will be expanded and we will get a fresh huge configure script.

AC_INIT
    Is the first mandatory macro. We need to indicate the name of the project and its version.

AM_INIT_AUTOMAKE
    Initialize environment for Automake. It is needed in all projects using Automake.

AC_PROG_CC
    Determine the C compiler to use.

AC_CONFIG_FILES
    Create each file by copying the corresponding template file (with .in extension) and substituting the output variable values.

AC_OUTPUT
    Marks the end of the configure template.


The use of some macros has changed between different versions of Autoconf:

    The package name and version was defined as arguments of AM_INIT_AUTOMAKE instead of AC_INIT.
    AC_OUTPUT was getting the list of generated files instead of using the additional macro AC_CONFIG_FILES.

Autoconf only knows its own macros but read additional ones in a file named aclocal.m4. These macros are used to extend Autoconf, it includes Automake macro (starting with AM_) and other third party macros. For instance, if you develop a library called foo, you might want to write an AC_CHECK_FOR_FOO macro so that developers using your library can check for its presence using Autoconf.

aclocal scans configure.ac and create an aclocal.m4 file which contains the macros mentioned in configure.ac. aclocal is part of the Automake package and search by default in Automake macros and in a system path typically /usr/share/aclocal.

    Launch aclocal. It will create a new file named aclocal.m4 in the current directory.
    Launch autoconf. It will create the configure script configure.

    Run now the new configure script: ./configure. You get the output and it create the makefile for your program.
    Run now make, to build your program. You get the output and a new tut_prog executable
    Now, if you can write in /usr/local/bin, run make install to install your program. Else you need to log as root before or use sudo and run sudo make install. You should get.
    Then, if /user/local/bin is in your path, you can run your program from everywhere. 

Resources:
https://developer.gnome.org/anjuta-build-tutorial/stable/create-autotools.html.en#create-autotools-autoconf
http://www.freesoftwaremagazine.com/articles/configuring_a_project_with_autoconf


ЗАБЕЛЕЖКА:
Добро домашно. Можеше да е енкоднато в UTF-8.
Успех!

Оценка: 8

