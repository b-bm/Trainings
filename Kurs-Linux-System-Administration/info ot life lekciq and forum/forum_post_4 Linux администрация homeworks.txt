Linux администрация homeworks:

homework_lecture_04:

от пост -> http://forums.academy.telerik.com/111514/%D0%B4%D0%BE%D0%BC%D0%B0%D1%88%D0%BD%D0%BE-%D0%BF%D0%BE-linux-os-homeworks-04

4. Write a bash script that will convert a directory containing .wav files into .mp3, useing lame for the encoding.

По долу е даден кода необходим за конвертирането.
За целта създавам файл - wav_to_mp3 >> командата за това е >> touch wav_to_mp3
След като направим файла посредством редактора >> vi /home/user1/wav_to_mp3 го отваряме и пишем съответните редове.
--------------------------------------------------------------
1  #!/bin/bash
2  #script to convert .wav to .mp3 using lame utility
3    for i in *.wav ; do
4      echo $i
5      bname=`basename $i .wav`
6      lame $i $bname.mp3
7  done
8  mkdir wav mp3 && mv *.mp3 mp3 && mv *.wav wav
--------------------------------------------------------------
След като сме въвели кода във файла за да запаметим промените
пишем >> :wq >> като представлява запис и изход.
--------------------------------------------------------------
За да стартираме файла, тоест изпълнението на горепосочените редове
в конзолата пишем >> bash wav_to_mp3 >> след което файла се изпълнява
--------------------------------------------------------------
Ето и данни от изведената от конзолата информация.

Track8.wav
LAME 3.99.5 32bits (<a target="_blank" class="ext" href="http://lame.sf.net">http://lame.sf.net</a><span class="ext"></span>)
CPU features: MMX (ASM used), SSE (ASM used), SSE2
Using polyphase lowpass filter, transition band: 16538 Hz - 17071 Hz
Encoding Track8.wav to Track8.mp3
Encoding as 44.1 kHz j-stereo MPEG-1 Layer III (11x) 128 kbps qval=3
    Frame          |  CPU time/estim | REAL time/estim | play/CPU |    ETA
 17376/17376 (100%)|    0:15/    0:15|    0:18/    0:18|   30.220x|    0:00
-------------------------------------------------------------------------------
   kbps        MS  %     long   switch  short %
  128.0      100.0       78.3   10.2    11.5
Writing LAME Tag...done
ReplayGain: +1.3dB
Track9.wav
LAME 3.99.5 32bits (<a target="_blank" class="ext" href="http://lame.sf.net">http://lame.sf.net</a><span class="ext"></span>)
CPU features: MMX (ASM used), SSE (ASM used), SSE2
Using polyphase lowpass filter, transition band: 16538 Hz - 17071 Hz
Encoding Track9.wav to Track9.mp3
Encoding as 44.1 kHz j-stereo MPEG-1 Layer III (11x) 128 kbps qval=3
    Frame          |  CPU time/estim | REAL time/estim | play/CPU |    ETA
 12484/12484 (100%)|    0:10/    0:10|    0:11/    0:11|   31.539x|    0:00
-------------------------------------------------------------------------------
   kbps        MS  %     long   switch  short %
  128.0      100.0       79.2   10.0    10.8
Writing LAME Tag...done
ReplayGain: +1.6dB

============================================================================================================

2. Configure your command prompt in such a way,that you will see the exact hour, minute and second of the execution of the previous command."

Здравейте,
За първи път ми е и съм малко притеснен... абе да бе!
Имам въпросче по тази втора задача. Вижте какво се опитвам да направя:

export HISTTIMEFORMAT="%T " - това ми трябва, за да изкарва информация history командата за часовете на изпълнение на командите;

export PS1="\u@\h:\n`echo 'last command time: '``history | tail --lines=1 | awk '{print $2}'`\n\w\$ " - а с това целя да променя command propt-a по мое желание и се получава
П
римерен ouptut:
username@host:
last command time: 13:59:27
~$
 
НО, както винаги има едно "но" - това нещо ми връща доста статични данни или иначе казано скриптът между `` се изпълнява само веднъж и това тука е гредата.
Ако някой има идея какво ми липсва, моля да сподели. Отворен съм за всякакви насоки и препоръки, че дори и директни линкове!
Поздрави,
Ники
P.S. става въпрос за bash(поне засега)

--------------------------------------------------------------------

-->  Както си го написал с {print $3} - при мен си проработи. 
last command time: 23:02:55
~$ 

Какво точно не се получава при теб?
edit: Сега забелязах. Ами можеби трябва хистори да се изпълни(с $ пред него).
Една подсказка  за по-малко писане: 
history | tail --lines=1 можеш да го подмениш history 1
	
	|--> Aми при мен става като го изпълних с $ в скоби.
		 $(history 1 | ...) - така го изпълняваш в отделен шел и после ако някак си го птинтнеш отвън, става.
		 Ето моето решение:
		 PS1=['$(history 1|cut -d " " -f-6|rev|cut -d " " -f-1|rev)']
		 Дано ти помогне.
	|-> 

-->  Малко по-просто решение:
man bash
/PROMPTING (или prompt strings)

В променливите има такива за дата и/или час. 
По този начин ще се показва времето, в което е приключило изпълнението на предишната команда. 
За да се покаже времето, в което е стартирана програмата - вероятно по-правилно би било наистина с използване на history.
Освен това, не е необходимо да се ползва `echo 'last command time:'`
Вместо това може да се напише само last command time (без ` и без echo).

--> За изпълнение на задачата са нужни две основни действия:
1) да се отиде в /etc/bashrc или в ~/.bashrc (текущата директория за съответния потребител) и да се вмъкнат

//export HISTTIMEFORMAT='%d-%h-%Y %T -->  '// Тук се казва на Bash да експортва информацията от .bash_history с timestamp във вида "07-Aug-2013 10:07:01 -->"
//export HISTFILESIZE=3000// Определя колко реда с информация да се пазят. Стойностите са от 1-3000.

2) да се изпълни командата "history 10" например, за да покаже последните 10 изпълнени команди. Стандартен изход от тази команда е:
  130  07-Aug-2013 09:43:47 -->  h10
  131  07-Aug-2013 09:43:51 -->  nano .bashrc
  132  07-Aug-2013 09:47:24 -->  history 3
  133  07-Aug-2013 09:48:02 -->  ls -lah
  134  07-Aug-2013 09:48:34 -->  chmod 755 h10.sh_BACKUP
  135  07-Aug-2013 09:48:41 -->  ./h10.sh_BACKUP
  136  07-Aug-2013 09:49:08 -->  nano h10.sh_BACKUP
  137  07-Aug-2013 09:57:34 -->  ./h10.sh_BACKUP
  138  07-Aug-2013 10:05:52 -->  nano .bashrc
  139  07-Aug-2013 10:07:01 -->  ./h10.sh_BACKUP
Където "130" е пореден номер на командата. Той се определя от HISTFILESIZE, който зададохме в bashrc;
"07-Aug-2013 09:43:47 -->" е timestamp на изпълнение на дадената команда и "h10" е самата команда, която сме изпълнили.

При изпълнение на " cat .bash_history" имаме резултат:

#1375859237
nano .bashrc

Където "#1375859237" е уникален номер, който HISTTIMEFORMAT го експортва като "07-Aug-2013 10:07:01 -->".
"nano .bashrc" е самата команда, която е изпълнена. В моето домашно съм направил и скрипт, който улеснява нещата.
Литература по въпроса може да се намери от тук:

1) http://tech.karbassi.com/2007/01/14/view-and-change-bash-history/
2) http://ss64.com/bash/date.html

--> Мисля че търсите под вола теле, общо взето. Задачата  е в пъти по-елементарна, поне по моето скромно мение  :) 
Използва се една команда за да се види временният резултат, и вече наистина редкатираш bashrc, ако го искаш за постоянно. 
Аз лично си го бях направил преди да видя че има такава задача в домашното, защото обичам да имам  timestamp :)

--> Като го напишеш в bashrc, просто ще се стартира всеки път, когато пуснеш шела(на този user). 
В случая, единствената полза да пишеш в bashrc е ако искаш винаги да имаш час и дата в аутпута на history.

--> Привет. В интернет открих доста по-елегантен начин за постигане на задачата, който разбира се е малко по-завъртян, но пък провокира мисленето:
bind -x '"\C-xt":printf "%${COLUMNS}s\r" $(date +%T)'
bind '"\C-m":"\C-xt\C-j"'
Въведи двете команди и виж резултата. 
Ако ти е интересно къде намерих решението - ето сайта с подробно обяснение какво всъщност се случва: http://ss64.org/viewtopic.php?id=485
 
--> Да дам и аз една идея без да споделям готово решение: 
погледнете какво прави trap (то е част от баш), и по точно кога се получава и какво е DEBUG сигнала.
Използвайки trap няма да има проблеми от сорта на тези с history и дори и когато ползвате команди като echo ще отчита.  
  
--> 

  
============================================================================================================


============================================================================================================


============================================================================================================

============================================================================================================
















